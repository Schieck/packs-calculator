x-common-secrets: &common-secrets
  JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-change-in-production}
  AUTH_SECRET: ${AUTH_SECRET:-your-auth-secret-change-in-production}

services:
  db:
    image: postgres:16-alpine
    container_name: packs-db
    environment:
      POSTGRES_USER: packer
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: packs
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD","pg_isready","-U","packer","-d","packs"]
      interval: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - packs-network
    deploy:
      resources:
        limits:
          memory: 1G

  backend:
    build: ./backend
    container_name: packs-backend
    environment:
      - DB_DSN=${DB_DSN:-postgres://packer:secret@localhost:5432/packs?sslmode=disable}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SECRET=${AUTH_SECRET}
      - PORT=${BACKEND_PORT}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    restart: unless-stopped
    networks:
      - packs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  # frontend:
  #   build: ./front-end
  #   container_name: packs-frontend
  #   environment:
  #     - JWT_SECRET=${JWT_SECRET}
  #     - AUTH_SECRET=${AUTH_SECRET}
  #   ports:
  #     - "${FRONTEND_PORT:-5173}:80"
  #   depends_on:
  #     - backend
  #   restart: unless-stopped
  #   networks:
  #     - packs-network
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M

networks:
  packs-network:
    driver: bridge

volumes:
  dbdata:
